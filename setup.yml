---
- hosts: localhost

  vars:
    repo_dir: "{{ playbook_dir }}/openwrt"
    vagrant_plugins_file: "{{lookup('file', '~/.vagrant.d/plugins.json') }}"
    vagrant_plugin: vagrant-lxc
    packages:
    - lxc
    - vagrant
    - vagrant-lxc

  environment:
    PATH: "{{ ansible_env.PATH }}"

  tasks:
    - name: Clone turris os repo from Gitlab
      git:
        repo: https://gitlab.labs.nic.cz/turris/openwrt.git
        dest: "{{ repo_dir}}"
        force: yes

    - name: Ensure that vagrant and lxc are installed
      apt:
        name: "{{ packages }}"

    - name: Install lxc vagrant plugin
      command: vagrant plugin install vagrant-lxc
      when:
        - vagrant_plugins_file['installed'] | json_query("[?installed==vagrant_plugin]")

    - name: Template Vagrantfile to playbook dir
      template:
        src: "{{ playbook_dir }}/Vagrantfile.j2"
        dest: "{{ playbook_dir }}/Vagrantfile"

    - name: Setup lxc network
      block:
      - name: Add USE_LXC_BRIDGE="true" to /etc/default/lxc-net
        lineinfile:
          path: /etc/default/lxc-net
          line: USE_LXC_BRIDGE="true"
          create: yes

      - name: Remove "lxc.network.type = empty" from /etc/lxc/default.conf
        lineinfile:
          path: /etc/lxc/default.conf
          line: "lxc.network.type = empty"
          state: absent

      - name: Add lxc network config to /etc/lxc/default.conf
        blockinfile:
          path: /etc/lxc/default.conf
          state: present
          insertbefore: BOF
          marker: ""
          block: |
            lxc.network.type = veth
            lxc.network.link = lxcbr0
            lxc.network.flags = up
            lxc.network.hwaddr = "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}"

      - name: Restart lxc-net
        systemd:
          name: lxc-net
          state: restarted
      become: yes

    - name: Start instance of turris omnia dev environment
      shell: "vagrant up --provider=lxc"
      args:
        chdir: "{{ playbook_dir }}"
      register: async_results
      async: 45
      poll: 0

    - name: Check if the instance is up
      async_status:
        jid: "{{ async_results.ansible_job_id }}"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 30
      ignore_errors: yes

    - block:
      - name: Get IP of vagrant LXC container
        shell: vagrant ssh-config | awk -F' ' '/HostName /{print $2}'
        register: vagrant_ssh_ip_out

      - name: Get IdentityFile of vagrant LXC container
        shell: vagrant ssh-config | awk -F' ' '/IdentityFile /{print $2}'
        register: vagrant_ssh_idfile_out

      - name: Get User of vagrant LXC container
        shell: vagrant ssh-config | awk -F' ' '/User /{print $2}'
        register: vagrant_ssh_user_out

      - name: Get Port of vagrant LXC container
        shell: vagrant ssh-config | awk -F' ' '/Port /{print $2}'
        register: vagrant_ssh_port_out

      - set_fact:
          vagrant_ip: "{{ vagrant_ssh_ip_out.stdout }}"
          vagrant_id_file: "{{ vagrant_ssh_idfile_out.stdout }}"
          vagrant_user: "{{ vagrant_ssh_user_out.stdout }}"
          vagrant_port: "{{ vagrant_ssh_port_out.stdout }}"

      - add_host:
          hostname: vagrant
          ansible_ssh_host: "{{ vagrant_ip }}"
          ansible_ssh_port: "{{ vagrant_port }}"
          ansible_ssh_user: "{{ vagrant_user }}"
          ansible_ssh_private_key_file: "{{ vagrant_id_file }}"
      tags: ssh

- hosts: vagrant
  tags: provision
  roles:
    - build-prereqs
  become: yes
